#
# CMakeCompiler.txt
#
# Copyright (C) 2009-16 by RStudio, Inc.
#
# Unless you have received this program directly from RStudio pursuant
# to the terms of a commercial license agreement with RStudio, then
# this program is licensed to you under the terms of version 3 of the
# GNU Affero General Public License. This program is distributed WITHOUT
# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
#
#

# use clang on osx
if(APPLE)

  if(NOT DEFINED CMAKE_C_COMPILER)
    set(CMAKE_C_COMPILER /usr/bin/cc)
  endif()

  if(NOT DEFINED CMAKE_CXX_COMPILER)
    set(CMAKE_CXX_COMPILER /usr/bin/c++)
  endif()

endif()

# require C++11 (or C++14 for MSVC)
if(WIN32)

  # use C++14 (MSVC doesn't support C++11)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /std:c++14")

  # force the use of the static runtime (since that's what we're
  # using in Boost and other supporting libraries).
  # TODO: Build Boost (perhaps with ExternalProject_Add) to match with
  # the requested runtime library used for a particular build type
  foreach(RELEASE_TYPE "" "_DEBUG" "_RELEASE" "_MINSIZEREL" "_RELWITHDEBINFO")
    foreach(FLAG CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
      string(REGEX REPLACE "/MDd?" "/MT" ${FLAG}${RELEASE_TYPE} "${${FLAG}${RELEASE_TYPE}}")
    endforeach()
  endforeach()

  # ensure release-style builds (for compatibility with how Boost was built)
  add_definitions(
    -D_CRT_NONSTDC_NO_DEPRECATE
    -D_ITERATOR_DEBUG_LEVEL=0
    )

else()
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
endif()

if(NOT DEFINED WINDRES)
  set(WINDRES windres.exe)
endif()

# avoid colored output (seems unreliable in cmd.exe terminal)
if(WIN32)
  set(CMAKE_COLOR_MAKEFILE OFF)
endif()

