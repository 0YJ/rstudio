17a18,20
> import com.google.gwt.aria.client.Id;
> import com.google.gwt.aria.client.Roles;
> import com.google.gwt.aria.client.SelectedValue;
22a26,28
> import com.google.gwt.event.dom.client.KeyCodes;
> import com.google.gwt.event.dom.client.KeyDownEvent;
> import com.google.gwt.event.dom.client.KeyDownHandler;
35a42
> import org.rstudio.core.client.dom.DomUtils;
107c114
<     public Tab(Widget child) {
---
>     public Tab(Widget child, Widget controls) {
114c121,125
< 
---
>       Roles.getTabRole().set(getElement());
>       String controlsId = DomUtils.ensureHasId(controls.getElement());
>       Roles.getTabRole().setAriaControlsProperty(getElement(), Id.of(controlsId));
>       Roles.getTabRole().setAriaSelectedState(getElement(), SelectedValue.FALSE);
>       getElement().setTabIndex(-1);
121a133,137
>     public HandlerRegistration addKeyDownHandler(KeyDownHandler handler)
>     {
>       return addDomHandler(handler, KeyDownEvent.getType());
>     }
> 
143a160,161
>         Roles.getTabRole().setAriaSelectedState(getElement(), SelectedValue.TRUE);
>         getElement().setTabIndex(0);
145a164,165
>         Roles.getTabRole().setAriaSelectedState(getElement(), SelectedValue.FALSE);
>         getElement().setTabIndex(-1);
159a180,183
> 
>     public void setFocus() {
>       getElement().focus();
>     }
230a255
>    * @param tabListLabel aria-label for the tablist
232c257
<   public TabLayoutPanel(double barHeight, Unit barUnit) {
---
>   public TabLayoutPanel(double barHeight, Unit barUnit, String tabListLabel) {
252a278,279
>     Roles.getTablistRole().set(tabBar.getElement());
>     Roles.getTablistRole().setAriaLabelProperty(tabBar.getElement(), tabListLabel);
410a438,452
>    * Set elementId on Tab owning given widget
>    * @param child
>    * @param id
>    */
>   public void setTabId(Widget child, String id)
>   {
>     checkChild(child);
>     Tab tab = tabs.get(getWidgetIndex(child));
>     if (tab != null)
>     {
>       tab.getElement().setId(id);
>     }
>   }
> 
>   /**
530c572
<     insert(child, new Tab(tab), beforeIndex);
---
>     insert(child, new Tab(tab, child), beforeIndex);
748c790,805
< 
---
>     tab.addKeyDownHandler(event -> {
>       switch(event.getNativeKeyCode()) {
>         case KeyCodes.KEY_LEFT:
>           selectPreviousTab();
>           break;
>         case KeyCodes.KEY_RIGHT:
>           selectNextTab();
>           break;
>         case KeyCodes.KEY_HOME:
>           selectFirstTab();
>           break;
>         case KeyCodes.KEY_END:
>           selectLastTab();
>           break;
>       }
>     });
758a816,857
> 
>   private void selectNextTab() {
>     if (selectedIndex == -1)
>       return;
>     if (selectedIndex == getWidgetCount() - 1) {
>       selectFirstTab();
>       return;
>     }
>     selectTab(selectedIndex + 1);
>     focusCurrentTab();
>   }
> 
>   private void selectPreviousTab() {
>     if (selectedIndex == -1)
>       return;
>     if (selectedIndex == 0) {
>       selectLastTab();
>       return;
>     }
>     selectTab(selectedIndex - 1);
>     focusCurrentTab();
>   }
> 
>   private void selectFirstTab() {
>     if (getWidgetCount() == 0)
>       return;
>     selectTab(0);
>     focusCurrentTab();
>   }
> 
>   private void selectLastTab() {
>     if (getWidgetCount() == 0)
>       return;
>     selectTab(getWidgetCount() - 1);
>     focusCurrentTab();
>   }
> 
>   private void focusCurrentTab() {
>     if (selectedIndex == -1)
>       return;
>     tabs.get(selectedIndex).setFocus();
>   }
