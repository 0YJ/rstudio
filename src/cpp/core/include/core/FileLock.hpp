/*
 * FileLock.hpp
 *
 * Copyright (C) 2009-12 by RStudio, Inc.
 *
 * Unless you have received this program directly from RStudio pursuant
 * to the terms of a commercial license agreement with RStudio, then
 * this program is licensed to you under the terms of version 3 of the
 * GNU Affero General Public License. This program is distributed WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
 * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
 *
 */

#ifndef CORE_FILE_LOCK_HPP
#define CORE_FILE_LOCK_HPP

#include <boost/utility.hpp>
#include <boost/shared_ptr.hpp>
#include <boost/scoped_ptr.hpp>
#include <boost/asio.hpp>
#include <boost/function.hpp>
#include <boost/bind.hpp>

namespace rstudio {
namespace core {

namespace locks {
void initialize();
} // namespace locks

class Error;
class FilePath;

class FileLock : boost::noncopyable
{
public:
   
   enum LockType { LOCKTYPE_ADVISORY, LOCKTYPE_LINKBASED };
   
   // control what kind of locks are generated by 'create()' method
   static void setLockType(LockType type) { type_ = type; }
   static LockType getLockType() { return type_; }
   static boost::shared_ptr<FileLock> create();
   
   // control lock timeout
   static void setLockTimeoutInterval(boost::posix_time::seconds timeoutInterval) { timeoutInterval_ = timeoutInterval; }
   static boost::posix_time::seconds getLockTimeoutInterval() { return timeoutInterval_; }
   
   // control lock refresh rate
   static void setLockRefreshRate(boost::posix_time::seconds refreshRate) { refreshRate_ = refreshRate; }
   static boost::posix_time::seconds getLockRefreshRate() { return refreshRate_; }
   
   // refreshes all FileLock implementations
   static void refresh();
   static void refreshPeriodically(boost::asio::io_service& service,
                                   boost::posix_time::seconds interval = FileLock::getLockRefreshRate());
   
   // sub-classes implement locking semantics
   virtual Error acquire(const FilePath& lockFilePath) = 0;
   virtual Error release() = 0;
   virtual FilePath lockFilePath() const = 0;
   
   virtual ~FileLock() {}
   
private:
   static LockType type_;
   static boost::posix_time::seconds timeoutInterval_;
   static boost::posix_time::seconds refreshRate_;
};

class AdvisoryFileLock : public FileLock
{
public:
   static bool isLocked(const FilePath& lockFilePath);
   static void refresh();
   
   Error acquire(const FilePath& lockFilePath);
   Error release();
   FilePath lockFilePath() const;
   
   AdvisoryFileLock();
   ~AdvisoryFileLock();
   
private:
   struct Impl;
   boost::scoped_ptr<Impl> pImpl_;
};

class LinkBasedFileLock : public FileLock
{
public:
   static bool isLocked(const FilePath& lockFilePath);
   static void refresh();
   
   Error acquire(const FilePath& lockFilePath);
   Error release();
   FilePath lockFilePath() const;
   
   LinkBasedFileLock();
   ~LinkBasedFileLock();
   
private:
   struct Impl;
   boost::scoped_ptr<Impl> pImpl_;
};

} // namespace core
} // namespace rstudio


#endif // CORE_FILE_LOCK_HPP
