/* UserPrefValues.cpp
 *
 * Copyright (C) 2009-19 by RStudio, Inc.
 *
 * Unless you have received this program directly from RStudio pursuant
 * to the terms of a commercial license agreement with RStudio, then
 * this program is licensed to you under the terms of version 3 of the
 * GNU Affero General Public License. This program is distributed WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
 * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
 *
 */
 
/* DO NOT HAND-EDIT! This file is automatically generated from the formal user preference schema
 * JSON. To add a preference, add it to "user-prefs-schema.json", then run "generate-prefs.R" to
 * rebuild this file.
 */

#include "UserPrefValues.hpp"

namespace rstudio {
namespace session {
namespace modules {
namespace prefs {

bool UserPrefValues::runRprofileOnResume()
{
   return readPref<bool>("run_rprofile_on_resume");
}

std::string UserPrefValues::saveWorkspace()
{
   return readPref<std::string>("save_workspace");
}

bool UserPrefValues::loadWorkspace()
{
   return readPref<bool>("load_workspace");
}

std::string UserPrefValues::initialWorkingDirectory()
{
   return readPref<std::string>("initial_working_directory");
}

std::string UserPrefValues::cranMirrorName()
{
   return readPref<std::string>("cran_mirror_name");
}

std::string UserPrefValues::cranMirrorHost()
{
   return readPref<std::string>("cran_mirror_host");
}

std::string UserPrefValues::cranMirrorUrl()
{
   return readPref<std::string>("cran_mirror_url");
}

std::string UserPrefValues::cranMirrorRepos()
{
   return readPref<std::string>("cran_mirror_repos");
}

std::string UserPrefValues::cranMirrorCountry()
{
   return readPref<std::string>("cran_mirror_country");
}

std::string UserPrefValues::bioconductorMirrorName()
{
   return readPref<std::string>("bioconductor_mirror_name");
}

std::string UserPrefValues::bioconductorMirrorUrl()
{
   return readPref<std::string>("bioconductor_mirror_url");
}

bool UserPrefValues::alwaysSaveHistory()
{
   return readPref<bool>("always_save_history");
}

bool UserPrefValues::removeHistoryDuplicates()
{
   return readPref<bool>("remove_history_duplicates");
}

bool UserPrefValues::showLastDotValue()
{
   return readPref<bool>("show_last_dot_value");
}

std::string UserPrefValues::lineEndingConversion()
{
   return readPref<std::string>("line_ending_conversion");
}

bool UserPrefValues::useNewlinesInMakefiles()
{
   return readPref<bool>("use_newlines_in_makefiles");
}

std::string UserPrefValues::windowsTerminalShell()
{
   return readPref<std::string>("windows_terminal_shell");
}

std::string UserPrefValues::posixTerminalShell()
{
   return readPref<std::string>("posix_terminal_shell");
}

std::string UserPrefValues::customShellCommand()
{
   return readPref<std::string>("custom_shell_command");
}

std::string UserPrefValues::customShellOptions()
{
   return readPref<std::string>("custom_shell_options");
}

bool UserPrefValues::showLineNumbers()
{
   return readPref<bool>("show_line_numbers");
}

bool UserPrefValues::highlightSelectedWord()
{
   return readPref<bool>("highlight_selected_word");
}

bool UserPrefValues::highlightSelectedLine()
{
   return readPref<bool>("highlight_selected_line");
}

bool UserPrefValues::panes()
{
   return readPref<bool>("panes");
}

bool UserPrefValues::useSpacesForTab()
{
   return readPref<bool>("use_spaces_for_tab");
}

int UserPrefValues::numSpacesForTab()
{
   return readPref<int>("num_spaces_for_tab");
}

bool UserPrefValues::autoDetectIndentation()
{
   return readPref<bool>("auto_detect_indentation");
}

bool UserPrefValues::showMargin()
{
   return readPref<bool>("show_margin");
}

bool UserPrefValues::blinkingCursor()
{
   return readPref<bool>("blinking_cursor");
}

int UserPrefValues::marginColumn()
{
   return readPref<int>("margin_column");
}

bool UserPrefValues::showInvisibles()
{
   return readPref<bool>("show_invisibles");
}

bool UserPrefValues::showIndentGuides()
{
   return readPref<bool>("show_indent_guides");
}

bool UserPrefValues::continueCommentsOnNewline()
{
   return readPref<bool>("continue_comments_on_newline");
}

std::string UserPrefValues::editorKeybindings()
{
   return readPref<std::string>("editor_keybindings");
}

bool UserPrefValues::insertMatching()
{
   return readPref<bool>("insert_matching");
}

bool UserPrefValues::insertSpacesAroundEquals()
{
   return readPref<bool>("insert_spaces_around_equals");
}

bool UserPrefValues::insertParensAfterFunctionCompletion()
{
   return readPref<bool>("insert_parens_after_function_completion");
}

bool UserPrefValues::tabMultilineCompletion()
{
   return readPref<bool>("tab_multiline_completion");
}

bool UserPrefValues::showHelpTooltipOnIdle()
{
   return readPref<bool>("show_help_tooltip_on_idle");
}

std::string UserPrefValues::surroundSelection()
{
   return readPref<std::string>("surround_selection");
}

bool UserPrefValues::enableSnippets()
{
   return readPref<bool>("enable_snippets");
}

std::string UserPrefValues::codeCompletion()
{
   return readPref<std::string>("code_completion");
}

std::string UserPrefValues::codeCompletionOther()
{
   return readPref<std::string>("code_completion_other");
}

bool UserPrefValues::consoleCodeCompletion()
{
   return readPref<bool>("console_code_completion");
}

int UserPrefValues::codeCompletionDelay()
{
   return readPref<int>("code_completion_delay");
}

int UserPrefValues::codeCompletionCharacters()
{
   return readPref<int>("code_completion_characters");
}

bool UserPrefValues::showFunctionSignatureTooltips()
{
   return readPref<bool>("show_function_signature_tooltips");
}

bool UserPrefValues::showDiagnosticsR()
{
   return readPref<bool>("show_diagnostics_r");
}

bool UserPrefValues::showDiagnosticsCpp()
{
   return readPref<bool>("show_diagnostics_cpp");
}

bool UserPrefValues::showDiagnosticsOther()
{
   return readPref<bool>("show_diagnostics_other");
}

bool UserPrefValues::styleDiagnostics()
{
   return readPref<bool>("style_diagnostics");
}

bool UserPrefValues::diagnosticsOnSave()
{
   return readPref<bool>("diagnostics_on_save");
}

bool UserPrefValues::backgroundDiagnostics()
{
   return readPref<bool>("background_diagnostics");
}

int UserPrefValues::backgroundDiagnosticsDelayMs()
{
   return readPref<int>("background_diagnostics_delay_ms");
}

bool UserPrefValues::diagnosticsInRFunctionCalls()
{
   return readPref<bool>("diagnostics_in_r_function_calls");
}

bool UserPrefValues::checkArgumentsToRFunctionCalls()
{
   return readPref<bool>("check_arguments_to_r_function_calls");
}

bool UserPrefValues::checkUnexpectedAssignmentInFunctionCall()
{
   return readPref<bool>("check_unexpected_assignment_in_function_call");
}

bool UserPrefValues::warnIfNoSuchVariableInScope()
{
   return readPref<bool>("warn_if_no_such_variable_in_scope");
}

bool UserPrefValues::warnVariableDefinedButNotUsed()
{
   return readPref<bool>("warn_variable_defined_but_not_used");
}

bool UserPrefValues::autoDiscoverPackageDependencies()
{
   return readPref<bool>("auto_discover_package_dependencies");
}

bool UserPrefValues::autoAppendNewline()
{
   return readPref<bool>("auto_append_newline");
}

bool UserPrefValues::stripTrailingWhitespace()
{
   return readPref<bool>("strip_trailing_whitespace");
}

bool UserPrefValues::restoreSourceDocumentCursorPosition()
{
   return readPref<bool>("restore_source_document_cursor_position");
}

bool UserPrefValues::reindentOnPaste()
{
   return readPref<bool>("reindent_on_paste");
}

bool UserPrefValues::verticallyAlignArgumentsIndent()
{
   return readPref<bool>("vertically_align_arguments_indent");
}

bool UserPrefValues::softWrapRFiles()
{
   return readPref<bool>("soft_wrap_r_files");
}

bool UserPrefValues::focusConsoleAfterExec()
{
   return readPref<bool>("focus_console_after_exec");
}

std::string UserPrefValues::foldStyle()
{
   return readPref<std::string>("fold_style");
}

bool UserPrefValues::saveBeforeSourcing()
{
   return readPref<bool>("save_before_sourcing");
}

bool UserPrefValues::syntaxColorConsole()
{
   return readPref<bool>("syntax_color_console");
}

bool UserPrefValues::scrollPastEndOfDocument()
{
   return readPref<bool>("scroll_past_end_of_document");
}

bool UserPrefValues::highlightRFunctionCalls()
{
   return readPref<bool>("highlight_r_function_calls");
}

int UserPrefValues::consoleLineLengthLimit()
{
   return readPref<int>("console_line_length_limit");
}

std::string UserPrefValues::ansiConsoleMode()
{
   return readPref<std::string>("ansi_console_mode");
}

bool UserPrefValues::showInlineToolbarForRCodeChunks()
{
   return readPref<bool>("show_inline_toolbar_for_r_code_chunks");
}

bool UserPrefValues::highlightCodeChunks()
{
   return readPref<bool>("highlight_code_chunks");
}

bool UserPrefValues::saveFilesBeforeBuild()
{
   return readPref<bool>("save_files_before_build");
}

double UserPrefValues::fontSizePoints()
{
   return readPref<double>("font_size_points");
}

std::string UserPrefValues::editorTheme()
{
   return readPref<std::string>("editor_theme");
}

std::string UserPrefValues::defaultEncoding()
{
   return readPref<std::string>("default_encoding");
}

bool UserPrefValues::toolbarVisible()
{
   return readPref<bool>("toolbar_visible");
}

std::string UserPrefValues::defaultProjectLocation()
{
   return readPref<std::string>("default_project_location");
}

bool UserPrefValues::sourceWithEcho()
{
   return readPref<bool>("source_with_echo");
}

bool UserPrefValues::newProjectGitInit()
{
   return readPref<bool>("new_project_git_init");
}

std::string UserPrefValues::defaultSweaveEngine()
{
   return readPref<std::string>("default_sweave_engine");
}

std::string UserPrefValues::defaultLatexProgram()
{
   return readPref<std::string>("default_latex_program");
}

bool UserPrefValues::useRoxygen()
{
   return readPref<bool>("use_roxygen");
}

bool UserPrefValues::useDataimport()
{
   return readPref<bool>("use_dataimport");
}

std::string UserPrefValues::pdfPreviewer()
{
   return readPref<std::string>("pdf_previewer");
}

bool UserPrefValues::alwaysEnableRnwConcordance()
{
   return readPref<bool>("always_enable_rnw_concordance");
}

bool UserPrefValues::insertNumberedLatexSections()
{
   return readPref<bool>("insert_numbered_latex_sections");
}

std::string UserPrefValues::spellingDictionaryLanguage()
{
   return readPref<std::string>("spelling_dictionary_language");
}

core::json::Object UserPrefValues::spellingCustomDictionaries()
{
   return readPref<core::json::Object>("spelling_custom_dictionaries");
}

int UserPrefValues::documentLoadLintDelay()
{
   return readPref<int>("document_load_lint_delay");
}

bool UserPrefValues::ignoreUppercaseWords()
{
   return readPref<bool>("ignore_uppercase_words");
}

bool UserPrefValues::ignoreWordsWithNumbers()
{
   return readPref<bool>("ignore_words_with_numbers");
}

bool UserPrefValues::realTimeSpellchecking()
{
   return readPref<bool>("real_time_spellchecking");
}

bool UserPrefValues::navigateToBuildError()
{
   return readPref<bool>("navigate_to_build_error");
}

bool UserPrefValues::packagesPaneEnabled()
{
   return readPref<bool>("packages_pane_enabled");
}

bool UserPrefValues::useRcppTemplate()
{
   return readPref<bool>("use_rcpp_template");
}

bool UserPrefValues::restoreSourceDocuments()
{
   return readPref<bool>("restore_source_documents");
}

bool UserPrefValues::handleErrorsInUserCodeOnly()
{
   return readPref<bool>("handle_errors_in_user_code_only");
}

bool UserPrefValues::autoExpandErrorTracebacks()
{
   return readPref<bool>("auto_expand_error_tracebacks");
}

bool UserPrefValues::checkForUpdates()
{
   return readPref<bool>("check_for_updates");
}

bool UserPrefValues::showInternalFunctions()
{
   return readPref<bool>("show_internal_functions");
}

std::string UserPrefValues::shinyViewerType()
{
   return readPref<std::string>("shiny_viewer_type");
}

std::string UserPrefValues::plumberViewerType()
{
   return readPref<std::string>("plumber_viewer_type");
}

std::string UserPrefValues::documentAuthor()
{
   return readPref<std::string>("document_author");
}

std::string UserPrefValues::rmdPreferredTemplatePath()
{
   return readPref<std::string>("rmd_preferred_template_path");
}

std::string UserPrefValues::rmdViewerType()
{
   return readPref<std::string>("rmd_viewer_type");
}

bool UserPrefValues::showPublishDiagnostics()
{
   return readPref<bool>("show_publish_diagnostics");
}

bool UserPrefValues::publishCheckCertificates()
{
   return readPref<bool>("publish_check_certificates");
}

bool UserPrefValues::usePublishCaBundle()
{
   return readPref<bool>("use_publish_ca_bundle");
}

std::string UserPrefValues::publishCaBundle()
{
   return readPref<std::string>("publish_ca_bundle");
}

bool UserPrefValues::rmdChunkOutputInline()
{
   return readPref<bool>("rmd_chunk_output_inline");
}

bool UserPrefValues::showDocOutlineRmd()
{
   return readPref<bool>("show_doc_outline_rmd");
}

bool UserPrefValues::autoRunSetupChunk()
{
   return readPref<bool>("auto_run_setup_chunk");
}

bool UserPrefValues::hideConsoleOnChunkExecute()
{
   return readPref<bool>("hide_console_on_chunk_execute");
}

std::string UserPrefValues::executionBehavior()
{
   return readPref<std::string>("execution_behavior");
}

bool UserPrefValues::showTerminalTab()
{
   return readPref<bool>("show_terminal_tab");
}

bool UserPrefValues::terminalLocalEcho()
{
   return readPref<bool>("terminal_local_echo");
}

bool UserPrefValues::terminalWebsockets()
{
   return readPref<bool>("terminal_websockets");
}

bool UserPrefValues::terminalAutoClose()
{
   return readPref<bool>("terminal_auto_close");
}

bool UserPrefValues::terminalTrackEnvironment()
{
   return readPref<bool>("terminal_track_environment");
}

bool UserPrefValues::showRmdRenderCommand()
{
   return readPref<bool>("show_rmd_render_command");
}

bool UserPrefValues::enableTextDrag()
{
   return readPref<bool>("enable_text_drag");
}

bool UserPrefValues::showHiddenFiles()
{
   return readPref<bool>("show_hidden_files");
}

std::string UserPrefValues::jobsTabVisibility()
{
   return readPref<std::string>("jobs_tab_visibility");
}

bool UserPrefValues::showLauncherJobsTab()
{
   return readPref<bool>("show_launcher_jobs_tab");
}

std::string UserPrefValues::launcherJobsSort()
{
   return readPref<std::string>("launcher_jobs_sort");
}

std::string UserPrefValues::busyDetection()
{
   return readPref<std::string>("busy_detection");
}

core::json::Object UserPrefValues::busyWhitelist()
{
   return readPref<core::json::Object>("busy_whitelist");
}

std::string UserPrefValues::knitWorkingDir()
{
   return readPref<std::string>("knit_working_dir");
}

std::string UserPrefValues::docOutlineShow()
{
   return readPref<std::string>("doc_outline_show");
}

std::string UserPrefValues::latexPreviewOnCursorIdle()
{
   return readPref<std::string>("latex_preview_on_cursor_idle");
}

bool UserPrefValues::wrapTabNavigation()
{
   return readPref<bool>("wrap_tab_navigation");
}

std::string UserPrefValues::globalTheme()
{
   return readPref<std::string>("global_theme");
}

bool UserPrefValues::gitDiffIgnoreWhitespace()
{
   return readPref<bool>("git_diff_ignore_whitespace");
}

bool UserPrefValues::consoleDoubleClickSelect()
{
   return readPref<bool>("console_double_click_select");
}

bool UserPrefValues::newProjGitInit()
{
   return readPref<bool>("new_proj_git_init");
}

std::string UserPrefValues::rootDocument()
{
   return readPref<std::string>("root_document");
}

   

}
}
}
}
