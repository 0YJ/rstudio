/* UserPrefValues.hpp
 *
 * Copyright (C) 2009-19 by RStudio, Inc.
 *
 * Unless you have received this program directly from RStudio pursuant
 * to the terms of a commercial license agreement with RStudio, then
 * this program is licensed to you under the terms of version 3 of the
 * GNU Affero General Public License. This program is distributed WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
 * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
 *
 */
 
/* DO NOT HAND-EDIT! This file is automatically generated from the formal user preference schema
 * JSON. To add a preference, add it to "user-prefs-schema.json", then run "generate-prefs.R" to
 * rebuild this file.
 */

#ifndef SESSION_USER_PREF_VALUES_HPP
#define SESSION_USER_PREF_VALUES_HPP

#include "Preferences.hpp"

namespace rstudio {
namespace session {
namespace modules {
namespace prefs {

class UserPrefValues: public Preferences
{
public:
   bool runRprofileOnResume();
   std::string saveWorkspace();
   bool loadWorkspace();
   std::string initialWorkingDirectory();
   std::string cranMirrorName();
   std::string cranMirrorHost();
   std::string cranMirrorUrl();
   std::string cranMirrorRepos();
   std::string cranMirrorCountry();
   std::string bioconductorMirrorName();
   std::string bioconductorMirrorUrl();
   bool alwaysSaveHistory();
   bool removeHistoryDuplicates();
   bool showLastDotValue();
   std::string lineEndingConversion();
   bool useNewlinesInMakefiles();
   std::string windowsTerminalShell();
   std::string posixTerminalShell();
   std::string customShellCommand();
   std::string customShellOptions();
   bool showLineNumbers();
   bool highlightSelectedWord();
   bool highlightSelectedLine();
   bool panes();
   bool useSpacesForTab();
   int numSpacesForTab();
   bool autoDetectIndentation();
   bool showMargin();
   bool blinkingCursor();
   int marginColumn();
   bool showInvisibles();
   bool showIndentGuides();
   bool continueCommentsOnNewline();
   std::string editorKeybindings();
   bool insertMatching();
   bool insertSpacesAroundEquals();
   bool insertParensAfterFunctionCompletion();
   bool tabMultilineCompletion();
   bool showHelpTooltipOnIdle();
   std::string surroundSelection();
   bool enableSnippets();
   std::string codeCompletion();
   std::string codeCompletionOther();
   bool consoleCodeCompletion();
   int codeCompletionDelay();
   int codeCompletionCharacters();
   bool showFunctionSignatureTooltips();
   bool showDiagnosticsR();
   bool showDiagnosticsCpp();
   bool showDiagnosticsOther();
   bool styleDiagnostics();
   bool diagnosticsOnSave();
   bool backgroundDiagnostics();
   int backgroundDiagnosticsDelayMs();
   bool diagnosticsInRFunctionCalls();
   bool checkArgumentsToRFunctionCalls();
   bool checkUnexpectedAssignmentInFunctionCall();
   bool warnIfNoSuchVariableInScope();
   bool warnVariableDefinedButNotUsed();
   bool autoDiscoverPackageDependencies();
   bool autoAppendNewline();
   bool stripTrailingWhitespace();
   bool restoreSourceDocumentCursorPosition();
   bool reindentOnPaste();
   bool verticallyAlignArgumentsIndent();
   bool softWrapRFiles();
   bool focusConsoleAfterExec();
   std::string foldStyle();
   bool saveBeforeSourcing();
   bool syntaxColorConsole();
   bool scrollPastEndOfDocument();
   bool highlightRFunctionCalls();
   int consoleLineLengthLimit();
   std::string ansiConsoleMode();
   bool showInlineToolbarForRCodeChunks();
   bool highlightCodeChunks();
   bool saveFilesBeforeBuild();
   double fontSizePoints();
   std::string editorTheme();
   std::string defaultEncoding();
   bool toolbarVisible();
   std::string defaultProjectLocation();
   bool sourceWithEcho();
   bool newProjectGitInit();
   std::string defaultSweaveEngine();
   std::string defaultLatexProgram();
   bool useRoxygen();
   bool useDataimport();
   std::string pdfPreviewer();
   bool alwaysEnableRnwConcordance();
   bool insertNumberedLatexSections();
   std::string spellingDictionaryLanguage();
   core::json::Object spellingCustomDictionaries();
   int documentLoadLintDelay();
   bool ignoreUppercaseWords();
   bool ignoreWordsWithNumbers();
   bool realTimeSpellchecking();
   bool navigateToBuildError();
   bool packagesPaneEnabled();
   bool useRcppTemplate();
   bool restoreSourceDocuments();
   bool handleErrorsInUserCodeOnly();
   bool autoExpandErrorTracebacks();
   bool checkForUpdates();
   bool showInternalFunctions();
   std::string shinyViewerType();
   std::string plumberViewerType();
   std::string documentAuthor();
   std::string rmdPreferredTemplatePath();
   std::string rmdViewerType();
   bool showPublishDiagnostics();
   bool publishCheckCertificates();
   bool usePublishCaBundle();
   std::string publishCaBundle();
   bool rmdChunkOutputInline();
   bool showDocOutlineRmd();
   bool autoRunSetupChunk();
   bool hideConsoleOnChunkExecute();
   std::string executionBehavior();
   bool showTerminalTab();
   bool terminalLocalEcho();
   bool terminalWebsockets();
   bool terminalAutoClose();
   bool terminalTrackEnvironment();
   bool showRmdRenderCommand();
   bool enableTextDrag();
   bool showHiddenFiles();
   std::string jobsTabVisibility();
   bool showLauncherJobsTab();
   std::string launcherJobsSort();
   std::string busyDetection();
   core::json::Object busyWhitelist();
   std::string knitWorkingDir();
   std::string docOutlineShow();
   std::string latexPreviewOnCursorIdle();
   bool wrapTabNavigation();
   std::string globalTheme();
   bool gitDiffIgnoreWhitespace();
   bool consoleDoubleClickSelect();
   bool newProjGitInit();
   std::string rootDocument();
     
};

}
}
}
}

#endif
