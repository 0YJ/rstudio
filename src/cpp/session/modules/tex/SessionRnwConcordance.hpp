/*
 * SessionRnwConcordance.hpp
 *
 * Copyright (C) 2009-11 by RStudio, Inc.
 *
 * This program is licensed to you under the terms of version 3 of the
 * GNU Affero General Public License. This program is distributed WITHOUT
 * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
 * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
 * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
 *
 */

#ifndef SESSION_MODULES_RNW_CONCORDANCE_HPP
#define SESSION_MODULES_RNW_CONCORDANCE_HPP

#include <string>
#include <vector>

#include <boost/utility.hpp>

#include <core/FilePath.hpp>

namespace core {
   class Error;
}
 
namespace session {
namespace modules { 
namespace tex {
namespace rnw_concordance {

class Concordance
{
public:
   Concordance()
      : offset_(0)
   {
   }

   // COPYING: via compiler

   core::Error readFromFile(const core::FilePath& inputFile);

   bool empty() const { return mapping_.empty(); }

   const std::string& outputFile() const { return outputFile_; }

   const std::string& inputFile() const { return inputFile_; }

   int offset() const { return offset_; }

   // checked access to rnw lines from tex lines
   int rnwLine(std::size_t texLine) const
   {
      // subtract 1 to normalize lines to C array indexes
      texLine--;

      // then substract the offset (which was the starting line
      // number of the output generated by the input file)
      texLine -= offset_;

      // return the mapping (but return 1 if it is out of range)
      if (texLine >= 0 && texLine < mapping_.size())
         return mapping_[texLine];
      else
         return 1;
   }

private:
   std::string outputFile_;
   std::string inputFile_;
   std::size_t offset_;
   std::vector<int> mapping_;
};

void removePrevious(const core::FilePath& rnwFile);

core::Error readIfExists(const core::FilePath& rnwFile,
                         Concordance* pConcordance);

class ConcordanceInjector : boost::noncopyable
{
public:
   ConcordanceInjector(const core::FilePath& rnwFile)
      : rnwFile_(rnwFile)
   {
   }
   virtual ~ConcordanceInjector()
   {
   }

   // COPYING: noncopyable (to prevent slicing)

protected:
   const core::FilePath& rnwFilePath() const { return rnwFile_; }

private:
   core::FilePath rnwFile_;
};

class SweaveConcordanceInjector : public ConcordanceInjector
{
public:
   explicit SweaveConcordanceInjector(const core::FilePath& rnwFile);
   virtual ~SweaveConcordanceInjector();

private:
   core::FilePath rnwFileBackup_;
};

} // namespace rnw_concordance
} // namespace tex
} // namespace modules
} // namesapce session

#endif // SESSION_MODULES_RNW_CONCORDANCE_HPP
