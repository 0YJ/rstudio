# Jobs in action

As mentioned in [RStudio Jobs](jobs.html), RStudio has the ability to send long running R scripts to [local and remote background jobs](https://www.rstudio.com/blog/rstudio-1-2-jobs/). This functionality can dramatically improve the productivity of data scientists and analysts using R since they can continue working in RStudio while jobs are running in the background.

A few examples of integrating RStudio Jobs with specific development workflows in shiny, plumber, machine learning, or any long-running process are documented below.

## Shiny App

Running a [Shiny](http://shiny.rstudio.com/) application as a local background job allows the current R session to remain free to work on other things. This can be especially helpful for making changes to the Shiny code and seeing the changes in real time.

A minimal example of running the a plumber API as a Job is documented below.

Use the RStudio global menu: - **File** \> **New File** \> **Shiny Web App\...** - Set the **Application Name:** as "shiny-example" - Set the **Application Type:** as a **Single File (app.R)**

![](images/create-new-shiny.png){fig-alt="A screenshot of the RStudio > New Shiny Web Application wizard, populated with the above instructions."}

This workflow will create a new folder titled "shiny-example" and populate it with a Shiny `app.R` file. In the *same directory* ("shiny-example") as the newly created `app.R`, create a second .R file titled `shiny-job.R` with the following example code:

``` r
options(shiny.autoreload=TRUE)
shiny::runApp()
```

The `shiny.autoreload=TRUE` option provides the real-time updating of the Shiny app code without requiring an explicit reload of the Shiny app, and the `shiny::runApp()` code enables running all the Shiny components within the "shiny-example" folder.

The `shiny-job.R` source file will have a **Run App** dropdown menu. From the **Run App** dropdown, select **In Background Job** and then press the **Run App** button:

![](images/run-shiny-background.png){fig-alt="A screenshot of the shiny-job.R file, with the Run App > In Background Job menu option highlighted."}

With **In Background Job** set, the **Run App** button will execute the Shiny app in a Background Job, and automatically present it in the **Viewer Pane**:

![](images/live-reload-shiny.png){fig-alt="A screenshot of the RStudio interface, displaying the Shiny app running as a Background Job, displaying the shiny app in the Viewer pane."}

Working with Shiny apps in this way allows for interactive editing and updating the displayed Shiny app in real time - both for Shiny user interface and server components.

Alternatively, in the `app.R` file, there will also be a **Run App** dropdown, select **In Background Job** and then press the **Run App** button. This will not have auto-reloading, but might be preferable for Shiny apps with a long startup time.

In this scenario, after making changes to the `app.R` file, the **Run App** button will be replaced with a **Reload App** button. The Shiny app will still be executed in a Background Job, but the user must explicitly reload the app after making changes and press the **Reload App** button, rather than the auto-reload behavior in the previous example.

![](images/reload-app-shiny.png){fig-alt="A screenshot of a shiny app.R file with the Run App button replaced with Reload App, indicating that changes have been made and the app can be updated when the user decides."}

## Plumber API

Similar to Shiny applications, [plumber](https://www.rplumber.io/) APIs can be run as a local background job. This allows the current R session to remain open for things like testing or interacting with the API via curl or R packages for querying APIs such as [httr](https://httr.r-lib.org/). plumber v1.0.0 or later is required for the below documentation.

If necessary, install the latest version of plumber from CRAN:

``` r
install.packages("plumber")
```

A minimal example of running a plumber API as a Job is documented below:

Use the RStudio global menu: **File** \> **New File** \> **Plumber API\...** and save it as `plumber-example`

In the *same directory* as `plumber.R`, create a second .R file titled `plumber-job.R` with the following example code:

``` r
plumber::plumb("plumber.R")$run(swagger=TRUE)
```

-   Execute it as a Job from the **Source** pane via the **Source \> Source as a Background Job** dropdown option.

![](images/source-plumber-job.png){fig-alt="A screenshot of the Source pane, with the Source > Source as Background Job dropdown option highlighted."}

From the **Background Jobs** tab within the **Console** pane, the running API will return the URL to the API and it's swagger Docs:

![](images/plumber-job-url.png){fig-alt="A screenshot of the Background Jobs pane, displaying the example URL to the API and the Swagger docs."}

``` code
# This is an example URL and 
# it will vary between sessions
Running plumber API at http://127.0.0.1:8461
Running swagger Docs at http://127.0.0.1:8461/__docs__/
```

1.  Select the URL appended to the output of "Listening on ..." from the R console
2.  Display it in the **Viewer** pane by executing the below `rstudioapi` call in the R console:

``` r
# This is an example URL and 
# it will vary between sessions
rstudioapi::viewer("http://127.0.0.1:8461/__docs__/")
```

This will display the plumber API's Swagger interface in the **Viewer** pane, allowing for interactive testing or interacting with the active plumber API in real time.

![](images/plumber-interaction.png){fig-alt="A screenshot of RStudio with the plumber-job.R file open in the Source pane, the Background job tab selected from the Console pane displaying the url to the API and it's docs, and the Viewer pane displaying the plumber API's Swagger docs."}

## Extract, Transform, Load (ETL)

Background and Launcher jobs are ideal for long running processes, like interactively loading data from an external database or API. Non-interactive, scheduled ETL scripts should be handled by Posit Connect.

## Simulations

Long running tasks like simulation studies can be run as background or Launcher jobs in order to keep the original R session open for other work.

For example - a Monte Carlo simulation for estimating pi could be saved as `simulate-pi.R`:

``` r
# Use a monto carlo simulation to estimate pi
n <- 1e6
if (!dir.exists("output")) dir.create("output")
results_file <- tempfile("pi-", "output", ".rds")

results <- matrix(nrow = n, ncol = 2)

for (i in 1:n){
   results[i,] <- runif(2)
   # save out results every 25 iterations
   if (i %% 25 == 0) {
      print(paste0("Saving results (i = ", i, ")"))
      save_results <- results[apply(results, 1, function(x) !all(is.na(x))),]
      print(
         paste0(
            "Pi estimate: ",
            mean((save_results[,1]^2 + save_results[,2]^2) <= 1) * 4)
      )
      saveRDS(save_results, results_file)
   }
}
```

This script includes:
- `print()` calls for each 25 runs and the estimation of pi at that moment in time
- `saveRDS()` to save out and overwrite the results after each 25 runs

Executing this script as a Job and including the `print()` calls will display the current estimated value of Pi and a running number of simulations in the Background Jobs pane:

![](images/estimating-pi-output.png){fig-alt="A screenshot of the Background Jobs pane displaying the output of the current estimated value of Pi and that it is being saved to a file along with the number of simulations."}

## Model Training

Model training, which can often take a long time, is another great use case for background and Launcher jobs. Local jobs are ideal for sequential model training while Launcher jobs can be used to train multiple models in parallel on elastic scaling infrastructure.

The example script at <https://tune.tidymodels.org/reference/example_ames_knn.html> can be executed as a Job, either making use of scaling infrastructure or to run scripts locally in parallel.

By adding `control = control_grid(verbose = TRUE)` in the tuning code:

``` r
ames_grid_search <-
  tune_grid(
    ames_wflow,
    resamples = rs_splits,
    grid = ames_grid,
    control = control_grid(verbose = TRUE)
  )
```

If including the `control_grid(verbose = TRUE)`, the output from that grid tuning of a tidymodels workflows will print and update in the **Background Jobs** tab, including the current fold and split:

![](images/tidymodels-control-grid.png){fig-alt="A screenshot of the output from grid tuning of a tidymodels workflows with printing in the **Background Jobs** tab, including the current fold and split."}

## Programmatic Jobs

The above documentation has focused on using the RStudio user interface to kick off and interact with Jobs. The [`rstudioapi`](https://github.com/rstudio/rstudioapi) package provides tools for programmatically creating local and Launcher jobs.

### Local Jobs

| Interact with the jobs pane.                                                             |     |
|:------------------------------|-----------------------------------------|
| [`jobAdd()`](https://rstudio.github.io/rstudioapi/reference/jobAdd.html)                 |     |
| [`jobAddOutput()`](https://rstudio.github.io/rstudioapi/reference/jobAddOutput.html)     |     |
| [`jobAddProgress()`](https://rstudio.github.io/rstudioapi/reference/jobAddProgress.html) |     |
| [`jobRemove()`](https://rstudio.github.io/rstudioapi/reference/jobRemove.html)           |     |
| [`jobRunScript()`](https://rstudio.github.io/rstudioapi/reference/jobRunScript.html)     |     |
| [`jobSetProgress()`](https://rstudio.github.io/rstudioapi/reference/jobSetProgress.html) |     |
| [`jobSetState()`](https://rstudio.github.io/rstudioapi/reference/jobSetState.html)       |     |
| [`jobSetStatus()`](https://rstudio.github.io/rstudioapi/reference/jobSetStatus.html)     |     |
|                                                                                          |     |

### Workbench Jobs
   |
| Interact with the launcher pane.                                                                                   |   |
|:-------| :------------------------   |
| [`launcherAvailable()`](https://rstudio.github.io/rstudioapi/reference/launcherAvailable.html)                     |   |
| [`launcherConfig()`](https://rstudio.github.io/rstudioapi/reference/launcherConfig.html)                           |   |
| [`launcherContainer()`](https://rstudio.github.io/rstudioapi/reference/launcherContainer.html)                     |   |
| [`launcherControlJob()`](https://rstudio.github.io/rstudioapi/reference/launcherControlJob.html)                   |   |
| [`launcherGetInfo()`](https://rstudio.github.io/rstudioapi/reference/launcherGetInfo.html)                         |   |
| [`launcherGetJob()`](https://rstudio.github.io/rstudioapi/reference/launcherGetJob.html)                           |   |
| [`launcherGetJobs()`](https://rstudio.github.io/rstudioapi/reference/launcherGetJobs.html)                         |   |
| [`launcherHostMount()`](https://rstudio.github.io/rstudioapi/reference/launcherHostMount.html)                     |   |
| [`launcherNfsMount()`](https://rstudio.github.io/rstudioapi/reference/launcherNfsMount.html)                       |   |
| [`launcherPlacementConstraint()`](https://rstudio.github.io/rstudioapi/reference/launcherPlacementConstraint.html) |   |
| [`launcherResourceLimit()`](https://rstudio.github.io/rstudioapi/reference/launcherResourceLimit.html)             |   |
| [`launcherSubmitJob()`](https://rstudio.github.io/rstudioapi/reference/launcherSubmitJob.html)                     |   |
| [`launcherSubmitR()`](https://rstudio.github.io/rstudioapi/reference/launcherSubmitR.html)                         |   |
|                                                                                                                    |   |

\

| Interact with the launcher pane.                                                                                   |
|:-----------------------------------------------------------------------|
| [`launcherAvailable()`](https://rstudio.github.io/rstudioapi/reference/launcherAvailable.html)                     |
| [`launcherConfig()`](https://rstudio.github.io/rstudioapi/reference/launcherConfig.html)                           |
| [`launcherContainer()`](https://rstudio.github.io/rstudioapi/reference/launcherContainer.html)                     |
| [`launcherControlJob()`](https://rstudio.github.io/rstudioapi/reference/launcherControlJob.html)                   |
| [`launcherGetInfo()`](https://rstudio.github.io/rstudioapi/reference/launcherGetInfo.html)                         |
| [`launcherGetJob()`](https://rstudio.github.io/rstudioapi/reference/launcherGetJob.html)                           |
| [`launcherGetJobs()`](https://rstudio.github.io/rstudioapi/reference/launcherGetJobs.html)                         |
| [`launcherHostMount()`](https://rstudio.github.io/rstudioapi/reference/launcherHostMount.html)                     |
| [`launcherNfsMount()`](https://rstudio.github.io/rstudioapi/reference/launcherNfsMount.html)                       |
| [`launcherPlacementConstraint()`](https://rstudio.github.io/rstudioapi/reference/launcherPlacementConstraint.html) |
| [`launcherResourceLimit()`](https://rstudio.github.io/rstudioapi/reference/launcherResourceLimit.html)             |
| [`launcherSubmitJob()`](https://rstudio.github.io/rstudioapi/reference/launcherSubmitJob.html)                     |
| [`launcherSubmitR()`](https://rstudio.github.io/rstudioapi/reference/launcherSubmitR.html)                         |
