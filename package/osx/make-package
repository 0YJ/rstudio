#!/usr/bin/env bash

set -e
set +H

PKG_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

BUILD_DIR_X86_64="${PKG_DIR}/build-x86_64"
BUILD_DIR_ARM64="${PKG_DIR}/build-arm64"

GWT_SRC_DIR="${PKG_DIR}/../../src/gwt"

# read command line arguments
clean=
arch=x86_64,arm64
build_gwt=1

for arg in "$@"; do

   case "$arg" in
   clean)         clean=1 ;;
   --clean)       clean=1 ;;
   --arch=*)      arch=${arg#*=} ;;
   --build-gwt=*) build_gwt=${arg#*=} ;;
   esac

done

case "${arch}" in *arm64*)  build_arm64=1 ;; esac
case "${arch}" in *x86_64*) build_x86_64=1 ;; esac


if [ -n "${clean}" ]; then

   # remove existing build dir
   rm -rf "${BUILD_DIR_X86_64}"
   rm -rf "${BUILD_DIR_ARM64}"

   # clean out ant build if requested
   if [ -d "${GWT_SRC_DIR}" ]; then
      cd "${GWT_SRC_DIR}"
      ant clean
   fi

   cd "${PKG_DIR}"
fi

# set up MAKEFLAGS
# don't use all CPUs on build machine (appears to cause hangs)
if [ -n "${JENKINS_URL}" ]; then
   MAKEFLAGS="${MAKEFLAGS} -j2"
else
   MAKEFLAGS="${MAKEFLAGS} -j$(sysctl -n hw.ncpu)"
fi


# perform an x86_64 build
if [ -n "${build_x86_64}" ]; then

   CMAKE="${CMAKE_X86_64-/usr/local/bin/cmake}"

   mkdir -p "${BUILD_DIR_X86_64}"
   mkdir -p "${BUILD_DIR_X86_64}/gwt"

   cd "${BUILD_DIR_X86_64}"
   rm -f CMakeCache.txt
   rm -rf build/_CPack_Packages

   echo "Configuring for x86_64 ..."
   arch -x86_64 "${CMAKE}"                              \
      -DCMAKE_BUILD_TYPE=RelWithDebInfo                 \
      -DCMAKE_OSX_DEPLOYMENT_TARGET="10.12"             \
      -DRSTUDIO_TARGET=Desktop                          \
      -DRSTUDIO_PACKAGE_BUILD=1                         \
      -DRSTUDIO_CRASHPAD_ENABLED=0                      \
      -DGWT_BUILD="${build_gwt}"                        \
      -DGWT_BIN_DIR="${BUILD_DIR_X86_64}/gwt/bin"       \
      -DGWT_WWW_DIR="${BUILD_DIR_X86_64}/gwt/www"       \
      -DGWT_EXTRAS_DIR="${BUILD_DIR_X86_64}/gwt/extras" \
      "${PKG_DIR}/../.."
   echo "Done!"

   echo "Building for x86_64 with flags '${MAKEFLAGS}' ..."
   arch -x86_64 /usr/local/bin/cmake --build . --target all -- ${MAKEFLAGS}
   echo "Done!"

fi

# perform an arm64 build
if [ -n "${build_arm64}" ]; then

   CMAKE="${CMAKE_ARM64-/opt/homebrew/bin/cmake}"

   mkdir -p "${BUILD_DIR_ARM64}"
   cd "${BUILD_DIR_ARM64}"
   rm -f CMakeCache.txt
   rm -rf build/_CPack_Packages

   echo "Configuring for arm64 ..."
   arch -arm64 cmake                        \
      -DCMAKE_BUILD_TYPE=RelWithDebInfo     \
      -DCMAKE_OSX_DEPLOYMENT_TARGET="10.12" \
      -DRSTUDIO_TARGET=Desktop              \
      -DRSTUDIO_PACKAGE_BUILD=1             \
      -DRSTUDIO_CRASHPAD_ENABLED=0          \
      -DGWT_BUILD=0                         \
      "${PKG_DIR}/../.."
   echo "Done!"

   echo "Building for arm64 with flags '${MAKEFLAGS}' ..."
   arch -arm64 cmake --build . --target all -- ${MAKEFLAGS}
   echo "Done!"

fi

echo "Building package ..."
cd "${BUILD_DIR_X86_64}"
cpack -G DragNDrop
echo "Done!"

cd "${PKG_DIR}"
