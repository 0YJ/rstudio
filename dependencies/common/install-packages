#!/usr/bin/env bash

#
# install-packages
#
# Copyright (C) 2022 by Posit Software, PBC
#
# Unless you have received this program directly from Posit Software pursuant
# to the terms of a commercial license agreement with Posit Software, then
# this program is licensed to you under the terms of version 3 of the
# GNU Affero General Public License. This program is distributed WITHOUT
# ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,
# MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the
# AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.
#
#

set -e

source "$(dirname "${BASH_SOURCE[0]}")/../tools/rstudio-tools.sh"
section "Installing R Packages"

# path to an renv lockfile, if any
lockfile=

# R repositories to be used
repos=https://cran.rstudio.com

# read command line arguments
for arg in "$@"; do
   case "${arg}" in
   --lockfile=*)       lockfile=${arg#*=} ;;
   --repos=*)          repos=${arg#*=} ;;
   *)                  echo "Unrecognized argument '${arg}'" ;;
   esac
done

# install dir
INSTALL_DIR=`pwd`

# utility function; used when bundling development versions of packages
install () {

  PACKAGE=$1
  PACKAGE_DIR=$PACKAGE
  PACKAGE_VERSION=$2
  PACKAGE_GITHUB_ROOT=$3
  PACKAGE_BUILD_OPTIONS=$4

  # git clone if necessary
  if [ ! -d "$PACKAGE_DIR" ]
  then
    if [[ -z "$RSTUDIO_GITHUB_LOGIN" ]]; then
      # no supplied credentials, clone directly
      git clone "https://github.com/$PACKAGE_GITHUB_ROOT/$PACKAGE.git"
    else
      # credentials supplied, use them
      git clone "https://$RSTUDIO_GITHUB_LOGIN@github.com/$PACKAGE_GITHUB_ROOT/$PACKAGE.git"
    fi
  fi

  # clean and checkout target branch
  cd $PACKAGE_DIR
  git checkout .
  git clean -df .
  git pull
  git checkout $PACKAGE_VERSION

  # append GitHub fields to DESCRIPTION
  # NOTE: older-style Github prefix required by Packrat 0.5.0;
  #       newer-style Remote prefix required by renv.
  PACKAGE_SHA1=`git rev-parse $PACKAGE_VERSION`
  cat <<EOF >> DESCRIPTION
GithubRepo: $PACKAGE
GithubUsername: rstudio
GithubRef: $PACKAGE_VERSION
GithubSHA1: $PACKAGE_SHA1
RemoteType: github
RemoteHost: api.github.com
RemoteRepo: $PACKAGE
RemoteUsername: rstudio
RemoteRef: $PACKAGE_VERSION
RemoteSha: $PACKAGE_SHA1
Origin: RStudioIDE
EOF

  # create source package (remove previous first)
  cd ..
  PACKAGE_ARCHIVE_PATTERN="$PACKAGE*.tar.gz"
  rm -f $PACKAGE_ARCHIVE_PATTERN

  # build package without vignettes, since vignettes may need e.g. knitr to build
  R CMD build --no-build-vignettes $PACKAGE_BUILD_OPTIONS "$PACKAGE"

  # modify filename to include SHA1
  PACKAGE_ARCHIVE=`ls $PACKAGE_ARCHIVE_PATTERN`
  PACKAGE_ARCHIVE_STEM=${PACKAGE_ARCHIVE%.tar.gz}
  PACKAGE_ARCHIVE_SHA1=${PACKAGE_ARCHIVE_STEM}_${PACKAGE_SHA1}.tar.gz
  mv $PACKAGE_ARCHIVE $PACKAGE_ARCHIVE_SHA1

}

# Packages embedded with the IDE. See also:
#   src/cpp/session/CMakeLists.txt
#   DependencyManager.java: "Dependency.embeddedPackage" vs. ".cranPackage"

# we often embed these packages but are not currently
# install rmarkdown main rstudio
# install rsconnect main rstudio
# install renv master rstudio
cat <<- EOF | R -s

# make sure user library exists
dir.create(Sys.getenv("R_LIBS_USER"), recursive = TRUE, showWarnings = FALSE)

# set up repositories
options(repos = c(CRAN = "${repos:="https://cran.rstudio.com"}"))

# install renv
if (!requireNamespace("renv", quietly = TRUE)) {
  install.packages("renv")
}

lockfile <- "${lockfile:=}"
if (nzchar(lockfile)) {
  # if we were provided a lockfile, use it
  writeLines(paste("Using lockfile:", lockfile))
  renv::restore(lockfile = lockfile)
} else {
  # otherwise, install preset list of packages from CRAN
  renv::install("devtools", "rmarkdown", "renv", "testthat", "xml2", "yaml")
}

EOF

# back to install-dir
cd "$INSTALL_DIR"
